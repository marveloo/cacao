#!/bin/sh

PROGRAM_NAME=${0##*/}
CA_NAME="Cacao CA"
CA_PATH=/etc/ssl/private/Cacao_CA.pem
CA_CERT_INSTALL_PATH=/usr/local/share/ca-certificates/Cacao_CA.crt
LEAF_DIR=/etc/ssl/private

help()
{
    echo "\
Usage: $PROGRAM_NAME [--] <domain-name>...
       $PROGRAM_NAME [-r] [-i] [-p]
       $PROGRAM_NAME --help

This tool operates an autogenerated $CA_NAME to generate a TLS server
certificate and its corresponding private key for the specified list of
domain names. As a result, a compound certificate and key file will be
created in $LEAF_DIR directory. The name of the created file
matches that of the first <domain-name> specified on the command line plus
the '.pem' extension. If the file already exists, it will be overwritten.

Options:
   -r   regenerate the $CA_NAME certificate
   -i   install the $CA_NAME certificate into the system trust store
   -p   print the $CA_NAME certificate

Examples:
   Generate a certificate and key file for example.com and *.example.com:
       $PROGRAM_NAME example.com \\*.example.com

   Regenerate the $CA_NAME certificate and (re)install it into the system trust store:
       $PROGRAM_NAME -ri

   Export the $CA_NAME certificate as $PROGRAM_NAME.crt:
       $PROGRAM_NAME -p > $PROGRAM_NAME.crt
    "
}

subject_alt_name()
(
    subject_alt_name=
    delimiter=

    for domain_name in "$@"; do
        subject_alt_name="$subject_alt_name${delimiter}DNS:$domain_name"
        delimiter=,
    done

    printf %s "$subject_alt_name"
)

gen_ca()
(
    umask 077

    # use -config "" to ensure no default configuration file is loaded
    openssl req -config "" -x509 -noenc \
        > "$CA_PATH" \
        -subj "/CN=$CA_NAME" \
        -addext "basicConstraints=critical,CA:true,pathlen:0" \
        -addext "keyUsage=critical,keyCertSign" \
        -days 5000 \
        || return 1

    echo "$CA_NAME has been generated." >&2
)

gen_leaf()
(
    umask 077

    leaf_name=$1
    leaf_path="$LEAF_DIR/$leaf_name.pem"

    # TLS server certificates must have a validity period of 825 days
    # or fewer on iOS and macOS: https://support.apple.com/en-us/HT210176

    # use -config "" to ensure no default configuration file is loaded
    openssl req -config "" -x509 -noenc \
        -CA "$CA_PATH" > "$leaf_path" \
        -subj "/CN=$leaf_name" \
        -addext "basicConstraints=critical,CA:false" \
        -addext "keyUsage=critical,digitalSignature,keyEncipherment" \
        -addext "extendedKeyUsage=serverAuth,clientAuth" \
        -addext "subjectAltName=$(subject_alt_name "$@")" \
        -days 825 \
        || return 1

    echo "Certificate and its corresponding private key have been generated in $leaf_path" >&2
)

print_ca_cert()
{
    openssl x509 -in "$CA_PATH" || return 1
}

install_ca_cert()
(
    echo "Installing the $CA_NAME certificate into the system trust store..." >&2

    print_ca_cert > "$CA_CERT_INSTALL_PATH" || return 1
    
    # use `--fresh` and hide confusing output messages on success 
    # to work around bugs in `update-ca-certificates`
    if ! output=$(update-ca-certificates --fresh 2>&1); then
        printf '%s\n' "$output" >&2
        return 1
    fi

    echo "The $CA_NAME certificate has been installed." >&2
)

# # # # # Parse options # # # # #

show_help=false
regenerate_ca=false
install_ca_cert=false
print_ca_cert=false
has_flags=false

while getopts rip-: flag
do
    [ "$flag" = - ] && flag="--$OPTARG" || flag="-$flag"

    case "$flag" in
        --help )
            show_help=true ;;
        -r )
            regenerate_ca=true ;;
        -i )
            install_ca_cert=true ;;
        -p )
            print_ca_cert=true ;;
        --* )
            echo "Illegal option $flag" >&2; exit 1 ;;
        -\? )
            exit 1
    esac

    has_flags=true
done

shift $((OPTIND - 1))

# # # # # # # Main # # # # # # #

if [ "$has_flags" = false ] && [ $# -eq 0 ]; then
    help >&2; exit 1
fi

if [ "$show_help" = true ]; then
    help; exit 0
fi

if [ "$regenerate_ca" = true ] || ! [ -f "$CA_PATH" ]; then
    gen_ca || exit
fi

if [ "$install_ca_cert" = true ]; then
    install_ca_cert || exit
fi

if [ "$print_ca_cert" = true ]; then
    print_ca_cert || exit
fi

if [ "$has_flags" = false ] && [ $# -gt 0 ]; then
    gen_leaf "$@" || exit
fi
